---
import Sidebar from "@/components/sidebar/sidebar.astro";
import Header from "@/components/header/header.astro";
import "../styles/global.css";
import Footer from "@/components/footer/footer.astro";

import { clsx } from "clsx";
type Props = {
  title?: string;
  description?: string;
  image?: string;
  hidden?: boolean;
  notSidebar?: boolean;
  className?: string;
};

const {
  title,
  description,
  image = "/open-graph.webp",
  hidden,
  notSidebar,
  className,
} = Astro.props;

const shownTitle = title
  ? title + ` | Axelar Documentation`
  : "Axelar Documentation";
const shownDescription =
  description ||
  "The Axelar Documentation tells you how to get started and be successful using Axelar. Axelar allows developers to build interchain dApps that connect to any blockchain. ";
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="img/png" href="/images/favicon.png" />
    <link rel="preload" as="image" href="/backgrounds/worldmapdark.webp" />
    <link rel="preload" as="image" href="/backgrounds/worldmaplight.webp" />
    <link
      href="https://api.fontshare.com/v2/css?f[]=clash-grotesk@1&display=swap"
      rel="stylesheet"
    />
    <link rel="canonical" href={canonicalURL} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <title>{shownTitle}</title>
    <meta content={shownTitle} property="og:title" />
    <meta content={shownTitle} property="twitter:title" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="twitter:url" content={Astro.url} />
    <meta content={shownDescription} name="description" />
    <meta content={shownDescription} property="og:description" />
    <meta content={shownDescription} property="twitter:description" />
    {image && <meta content={new URL(image, Astro.url)} property="og:image" />}
    {
      image && (
        <meta content={new URL(image, Astro.url)} property="twitter:image" />
      )
    }
    <meta content="website" property="og:type" />
    <meta content="summary_large_image" name="twitter:card" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    {hidden && <meta content="noindex" name="robots" />}
    <link
      rel="sitemap"
      type="application/xml"
      title="Sitemap"
      href="/sitemap-0.xml"
    />

    <link rel="stylesheet" href="/styles/prism.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/instantsearch.css@7.4.3/themes/satellite-min.css"
    />
    <script
      type="text/partytown"
      src="https://www.googletagmanager.com/gtag/js?id=G-81ZT0BK1ZB"></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-81ZT0BK1ZB");
    </script>
    <script src="/src/scripts/index.ts"></script>
    <script is:inline>
      const root = document.documentElement;
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();
      if (
        theme === "light" ||
        (theme === "system" &&
          !window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        root.classList.remove("dark");
      } else {
        root.classList.add("dark");
      }
    </script>
  </head>
</html>
<body class="bg-background text-foreground">
  <Header />
  <!-- <div id="search-results"></div> -->
  <main class={clsx("flex items-start")}>
    {!notSidebar && <Sidebar />}
    <div class={clsx("flex-1", className)}>
      <slot />
      <Footer />
    </div>
  </main>

  <script>
    const getTheme = () => localStorage.getItem("theme") || "light";

    const setTheme = (theme: string) => {
      if (theme === "light") {
        document.documentElement.classList.remove("dark");
        document.documentElement.setAttribute("data-theme", "light-plus");
      } else {
        document.documentElement.classList.add("dark");
        document.documentElement.setAttribute("data-theme", "vitesse-dark");
      }
    };

    window.addEventListener("DOMContentLoaded", () => setTheme(getTheme()));
    document.addEventListener("astro:after-swap", () => setTheme(getTheme()));

    const handleHeaderToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
      document.documentElement.setAttribute(
        "data-theme",
        isDark ? "vitesse-dark" : "light-plus",
      );
    };

    document
      .querySelectorAll("#header-toggle")
      .forEach((el) => el.addEventListener("click", handleHeaderToggleClick));
  </script>
</body>
